// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package source is a generated GoMock package.
package source

import (
	http "net/http"
	reflect "reflect"

	global "github.com/armory/dinghy/pkg/settings/global"
	util "github.com/armory/dinghy/pkg/util"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockSourceConfiguration is a mock of SourceConfiguration interface.
type MockSourceConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockSourceConfigurationMockRecorder
}

// MockSourceConfigurationMockRecorder is the mock recorder for MockSourceConfiguration.
type MockSourceConfigurationMockRecorder struct {
	mock *MockSourceConfiguration
}

// NewMockSourceConfiguration creates a new mock instance.
func NewMockSourceConfiguration(ctrl *gomock.Controller) *MockSourceConfiguration {
	mock := &MockSourceConfiguration{ctrl: ctrl}
	mock.recorder = &MockSourceConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceConfiguration) EXPECT() *MockSourceConfigurationMockRecorder {
	return m.recorder
}

// BustCacheHandler mocks base method.
func (m *MockSourceConfiguration) BustCacheHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BustCacheHandler", w, r)
}

// BustCacheHandler indicates an expected call of BustCacheHandler.
func (mr *MockSourceConfigurationMockRecorder) BustCacheHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BustCacheHandler", reflect.TypeOf((*MockSourceConfiguration)(nil).BustCacheHandler), w, r)
}

// GetSettings mocks base method.
func (m *MockSourceConfiguration) GetSettings(r *http.Request, logr *logrus.Logger) (*global.Settings, util.PlankClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", r, logr)
	ret0, _ := ret[0].(*global.Settings)
	ret1, _ := ret[1].(util.PlankClient)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockSourceConfigurationMockRecorder) GetSettings(r, logr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockSourceConfiguration)(nil).GetSettings), r, logr)
}

// GetSourceName mocks base method.
func (m *MockSourceConfiguration) GetSourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceName indicates an expected call of GetSourceName.
func (mr *MockSourceConfigurationMockRecorder) GetSourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceName", reflect.TypeOf((*MockSourceConfiguration)(nil).GetSourceName))
}

// IsMultiTenant mocks base method.
func (m *MockSourceConfiguration) IsMultiTenant() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMultiTenant")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMultiTenant indicates an expected call of IsMultiTenant.
func (mr *MockSourceConfigurationMockRecorder) IsMultiTenant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMultiTenant", reflect.TypeOf((*MockSourceConfiguration)(nil).IsMultiTenant))
}

// LoadSetupSettings mocks base method.
func (m *MockSourceConfiguration) LoadSetupSettings(arg0 *logrus.Logger) (*global.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSetupSettings", arg0)
	ret0, _ := ret[0].(*global.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSetupSettings indicates an expected call of LoadSetupSettings.
func (mr *MockSourceConfigurationMockRecorder) LoadSetupSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSetupSettings", reflect.TypeOf((*MockSourceConfiguration)(nil).LoadSetupSettings), arg0)
}
