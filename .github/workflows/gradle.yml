name: dinghy
on:
  push:

jobs:
  main:
    env:
      BASE_PROJECT: dinghy
      GRGIT_USER: GitHub
      GRGIT_PASS: ${{ secrets.GITHUB_TOKEN }}
      GRADLE_ARGS: -Partifactory_user=${{secrets.ARTIFACTORY_USER}} -Partifactory_password=${{secrets.ARTIFACTORY_PASSWORD}} --info -x dockerClean -x dockerPrepare
      AWS_ACCESS_KEY_ID: ${{ secrets.LAMBDA_PUBLISHER_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.LAMBDA_PUBLISHER_AWS_SECRET_ACCESS_KEY }}
      BUCKET_URL: ${{ secrets.LAMBDA_PUBLISHER_BUCKET_BASE_URL }}
      AWS_EC2_METADATA_DISABLED: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Fetch full history
        run: git fetch --prune --tags --unshallow

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Login to Artifactory
        run: |
          docker login -u ${{ secrets.ARTIFACTORY_USER }} -p ${{ secrets.ARTIFACTORY_PASSWORD }} armory-docker-local.jfrog.io

      - name: create softlink for docker plugin
        run: |
          rm -fr build/docker
          mkdir -p build
          ln -sf $(pwd) $(pwd)/build/docker

      - name: Publish devSnapshot

        if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/heads/release-')
        run: |
          ./gradlew devSnapshot docker dockerPush $GRADLE_ARGS
          echo "BUILD_NUMBER=$(./gradlew $GRADLE_ARGS printVersion|grep VERSION|awk -F: '{print $2}')" >> $GITHUB_ENV

      - name: Publish Candidate
        if: github.ref == 'refs/heads/master'
        run: |
          ./gradlew candidate docker dockerPush $GRADLE_ARGS
          echo "BUILD_NUMBER=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS printVersion|grep VERSION|awk -F: '{print $2}')" >> $GITHUB_ENV

      - name: Publish Release
        if: startsWith(github.ref, 'refs/heads/release-')
        run: |
          ./gradlew final docker dockerPush $GRADLE_ARGS
          echo "BUILD_NUMBER=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS  printVersion|grep VERSION|awk -F: '{print $2}')" >> $GITHUB_ENV

      - name: Run Security Scan
        uses: armory-io/aquasec-scan-action@v0.0.10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          username: ${{ secrets.AQUA_USER }}
          password: ${{ secrets.AQUA_PASSWORD }}
          url: https://aquasec.armory.io
          image: armory/${{ env.BASE_PROJECT }}:${{ env.BUILD_NUMBER }}
          registry: Artifactory

      - name: Create UBI image
        run: |
          docker login -u ${{ secrets.REDHAT_REGISTRY_USER }} -p "${{ secrets.REDHAT_REGISTRY_PASSWORD }}" registry.redhat.io
          docker build . -t armory/$BASE_PROJECT:ubi -f Dockerfile.ubi

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        run: docker login -u ${{ secrets.DOCKER_HUB_USER }} -p '${{ secrets.DOCKER_HUB_PASS }}'

      - name: Login to Red Hat
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        run: docker login -u unused -p "${{ secrets.REDHAT_REGISTRY_TOKEN }}" scan.connect.redhat.com

      - name: Publish Release to Docker Hub
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        run: |
          RELEASE=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS  printVersion|grep VERSION|awk -F: '{print $2}')
          echo "Tagging armory-docker-all.jfrog.io/armory/$BASE_PROJECT$RELEASE to armory/$BASE_PROJECT:$RELEASE"
          docker image tag armory-docker-local.jfrog.io/armory/$BASE_PROJECT:$RELEASE armory/$BASE_PROJECT:$RELEASE
          echo "Pushing image..."
          docker push armory/$BASE_PROJECT:$RELEASE

      - name: Publish Release to Red Hat Registry
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        run: |
          RELEASE=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS  printVersion|grep VERSION|awk -F: '{print $2}')
          echo "Tagging armory/$BASE_PROJECT:ubi to armory/$BASE_PROJECT:$RELEASE-ubi"
          docker image tag armory/$BASE_PROJECT:ubi armory/$BASE_PROJECT:$RELEASE-ubi

          echo "Tagging armory/$BASE_PROJECT:ubi to armory-docker-local.jfrog.io/armory/$BASE_PROJECT:$RELEASE-ubi"
          docker image tag armory/$BASE_PROJECT:ubi armory-docker-local.jfrog.io/armory/$BASE_PROJECT:$RELEASE-ubi

          echo "Tagging armory/$BASE_PROJECT:ubi to scan.connect.redhat.com/${{ secrets.REDHAT_PID }}/$BASE_PROJECT:$RELEASE-ubi for certification"
          docker image tag armory/$BASE_PROJECT:ubi scan.connect.redhat.com/${{ secrets.REDHAT_PID }}/$BASE_PROJECT:$RELEASE-ubi

          echo "Pushing image..."
          docker push armory/$BASE_PROJECT:$RELEASE-ubi
          docker push armory-docker-local.jfrog.io/armory/$BASE_PROJECT:$RELEASE-ubi
          docker push scan.connect.redhat.com/${{ secrets.REDHAT_PID }}/$BASE_PROJECT:$RELEASE-ubi

      - name: Package Lambda
        run: |
          make lambda

      - name: Publish lambda to staging
        if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/heads/release-')
        run: |
          aws s3 cp ${{ github.workspace }}/cachelambda/lambda_function_payload.zip s3://$BUCKET_URL/${{ env.BUILD_NUMBER }}.zip

      - name: Publish lambda to prod
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        run: |
          echo "RELEASE=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS  printVersion|grep VERSION|awk -F: '{print $2}')" >> $GITHUB_ENV
          aws s3 cp ${{ github.workspace }}/cachelambda/lambda_function_payload.zip s3://$BUCKET_URL/$RELEASE.zip

      - name: Trigger staging infrastructure
        uses: armory-io/spin-trigger-pipeline-action@dinghy_cloud
        if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/heads/release-')
        id: trigger-staging
        with:
          baseUrl: https://spinnaker-api.cloud.armory.io:8443/api/v1
          source: dinghy-infrastructure
          environment: staging
          dinghyHost: http://a52b989e4f6fd49c2ae1972f9d49b747-1082375335.us-west-2.elb.amazonaws.com
          bucketName: ${{ env.BUCKET_URL }}
          lambdaKey: ${{ env.BUILD_NUMBER }}
          crtFile: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_CERTIFICATE }}
          keyFile: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_PRIVATE_KEY }}
          passphrase: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_CERTIFICATE_PASSWORD }}
          isEncoded: true

      - name: Trigger prod infrastructure
        uses: armory-io/spin-trigger-pipeline-action@dinghy_cloud
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
        id: trigger-prod
        with:
          baseUrl: https://spinnaker-api.cloud.armory.io:8443/api/v1
          source: dinghy-infrastructure
          environment: prod
          dinghyHost: http://a4620e289c4b64c748efcb6879913a15-2029009615.us-west-2.elb.amazonaws.com
          bucketName: ${{ env.BUCKET_URL }}
          lambdaKey: ${{ env.RELEASE }}
          crtFile: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_CERTIFICATE }}
          keyFile: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_PRIVATE_KEY }}
          passphrase: ${{ secrets.ARMORY_CLOUD_SPINNAKER_CLIENT_CERTIFICATE_PASSWORD }}
          isEncoded: true